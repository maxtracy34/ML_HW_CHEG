{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hello ChemE's\n",
    "\n",
    "Welcome!\n",
    "\n",
    "Below is a script in python\n",
    "\n",
    "We are using the jupyter notebook so you dont need to install any packages and solvers etc.\n",
    "\n",
    "The script does the following\n",
    "    - Divide the data into k groups\n",
    "    - for each fold\n",
    "        - Learn an mlp neural network on the all data except the kth fold\n",
    "        - Display the error and artiy plot compared to the kth fold\n",
    "        \n",
    "What data is being used?\n",
    "    - The data is from a counter current heat exchanger\n",
    "    \n",
    "What do you have to do?\n",
    "    In the main function on the top, there are 2 parameters, k and n. Your jobs is to change k and n (using only the values shown) and observe how the fit and error changes. \n",
    "    \n",
    "Complete all questions in the associated pdf and thats it!\n",
    "\n",
    "Good luck!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XXXXX\n",
      "For Fold Number 0\n",
      "The total error is 3140.48847530094\n",
      "The mean error is 62.8097695060188\n",
      "The standard deviation of error is 89.64902067628353\n",
      "XXXXX\n",
      "For Fold Number 1\n",
      "The total error is 4266.650938007724\n",
      "The mean error is 85.33301876015452\n",
      "The standard deviation of error is 85.5335763198617\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Homework for students on ML\n",
    "\n",
    "\n",
    "\n",
    "def main():\n",
    "    #Helllo\n",
    "    #You will only be asked to change the depth of the neurel network and the number of folds\n",
    "    #do not touch anything else\n",
    "    \n",
    "    inputvalues = indata()\n",
    "    outputvalues = outdata()\n",
    "    k = 2       # Enter your number of prefered cross validation folds (2,4, or 5 only)\n",
    "    n = 100      # depth of neurel network (anywhere from 1 to 100, must be an integer)\n",
    "    NeurelNet(inputvalues,outputvalues,k,n)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# DO NOT TOUCH ANYTHING BELOW THIS LINE!\n",
    "\n",
    "def outdata():\n",
    "    return[124.95035171596544, 266.9541277336668, 34.774002945577685, 143.0303253983099, 245.9896152054247, 714.2998544676796, 319.53428867433115,\n",
    "           137.632866192478, 446.4659529665929, 91.31088470849802, 38.530232611722084, 103.44192829873644, 46.016455671129634, 353.07695687080553,\n",
    "           28.443599556524088, 54.08778554069264, 283.6574287676655, 434.8378788349824, 269.55198563720944, 325.71215828898494, 72.26594908791752,\n",
    "           237.03036195878244, 83.1696695792648, 89.02968988267395, 338.52570176381784, 50.94723903977204, 101.61963912410685, 186.6011439740455,\n",
    "           248.26094637555948, 340.606012961975, 33.26761311698171, 990.2109791742863, 243.70368855558695, 125.98836225409968, 286.31925114715966,\n",
    "           202.04651722231935, 188.823280158216, 49.33068664998046, 69.86213073873135, 26.040304392850036, 88.68876896448471, 85.3246526520892,\n",
    "           250.0164369943861, 256.08412616899966, 90.16731081874444, 304.5920264349137, 171.89888252263802, 41.49919991697487, 57.50747882928495,\n",
    "           72.28356126499536, 329.7802747683717, 155.34437050005292, 159.9727416077182, 393.2492004570402, 380.4740801212173, 186.40116815131938,\n",
    "           253.8767958977593, 615.6493294380391, 90.05804806761036, 198.87276571542176, 419.5619437521817, 172.88541253893374, 46.697274883838766,\n",
    "           155.51900466241398, 232.5667903602796, 111.74981460276915, 61.667206686333344, 145.69378450280104, 463.82231330383036, 208.51771621647504,\n",
    "           103.77808171518527, 194.61028872673364, 198.8881271958888, 53.751719915807556, 111.57493609944545, 313.697212991855, 180.10079247540247,\n",
    "           118.58562685508468, 215.2542913900838, 26.677982700197834, 335.33897939197254, 326.3764229498871, 411.94781459307484, 159.9434525345377,\n",
    "           86.23153067776813, 78.89978803024617, 52.41355642025016, 110.85354497492443, 260.96674062894346, 147.3943317875181, 36.18491111415874,\n",
    "           240.64349707136662, 229.34342123256826, 157.25004937858884, 79.34137014940694, 163.91706199537782, 269.9197239184292, 179.4092128143096,\n",
    "           89.73259219419221, 213.08482848397927]\n",
    "\n",
    "def indata():\n",
    "    return [[0.04007372149166915, 0.05727047098988795, 0.6110292114687833, 0.24621327441648033, 99.76247872036953, 37.10734664080323, 53.678579212918834],\n",
    "            [0.02070651781743555, 0.04729160066627511, 0.7123026198023638, 0.30316847872481867, 84.73327764808934, 24.26587444830612, 57.09219987964111],\n",
    "            [0.030094405298344278, 0.043110619203409986, 0.3729253265239192, 0.10909340596189812, 62.880511014215166, 40.3637061224317, 53.51363165254008],\n",
    "            [0.023426666208636867, 0.05290363703458967, 0.6170956218117111, 0.23460800473257876, 63.72953266535805, 21.812425746967893, 54.50375387796117],\n",
    "            [0.047972539648546704, 0.07716793269420978, 0.681169105114345, 0.35099995457516164, 111.37105143667947, 39.67062676146218, 57.68435226746001],\n",
    "            [0.013052745311424401, 0.04068311924216998, 0.595835324000423, 0.2842906662421758, 103.9557814434378, 30.69325142105163, 52.64329153968705],\n",
    "            [0.016917805849497217, 0.0468039010371607, 0.5908187946015402, 0.12860148523715048, 98.90224585741103, 27.43416623874237, 53.32956866422294],\n",
    "            [0.029355356744237435, 0.05399796725683309, 0.42792181384559513, 0.23781632422303578, 86.04218272245971, 36.4203882446234, 58.75097859555914],\n",
    "            [0.022169939027175727, 0.0417041272956195, 0.6709218487893102, 0.3544143749637726, 78.85981510247557, 40.368887592089926, 50.730567573148804],\n",
    "            [0.04094749763383005, 0.05988914538977116, 0.7552639587603961, 0.2942750779678974, 83.28111226283181, 29.015310724691048, 57.31523821140285],\n",
    "            [0.04038097920823653, 0.05158251737404776, 0.3759020547713303, 0.2562747916530017, 74.46408270563774, 21.440176337828007, 51.088500457350825],\n",
    "            [0.03773425129287174, 0.05944455155925077, 0.5593508708046966, 0.4050680880023051, 69.08386600981471, 34.42054256829996, 58.037660780775106],\n",
    "            [0.03345859186546608, 0.045712060020508864, 0.6344761704992808, 0.13517039406503772, 72.07021527816606, 33.28591568825353, 50.09566694253795],\n",
    "            [0.023443787219466404, 0.05219111460497245, 0.5280891657239447, 0.3586576051693886, 88.67652879141883, 21.521764795677935, 56.43779866666301],\n",
    "            [0.04713343204454543, 0.06566078232235023, 0.43019796741866134, 0.10125118349212148, 86.35087891001236, 26.58280068865448, 57.795373418130815],\n",
    "            [0.034216420759038156, 0.049136156850955424, 0.6105291750850238, 0.18767250642639421, 80.28821253110253, 26.317352950282284, 55.50758571805691],\n",
    "            [0.015665016827678447, 0.029289977191727712, 0.7668764970585936, 0.4448480512797387, 69.93294512658366, 20.48915108274353, 50.36688929617273],\n",
    "            [0.026740381136060504, 0.0547748951790247, 0.9056361738890405, 0.43216386587377853, 110.69438033242123, 31.547073243023107, 58.7632612365546],\n",
    "            [0.015866507783775907, 0.042904562253642725, 0.878984214923415, 0.4409149290675679, 62.786575315142656, 29.12156232745303, 57.90602326223351],\n",
    "            [0.01798582414517212, 0.03199664048866537, 0.8272893223449767, 0.3992398912588908, 101.22625987273254, 41.86207878311202, 57.08205620805417],\n",
    "            [0.045570501443139205, 0.061188229956749884, 0.7000571720632586, 0.4324248751470765, 74.42042570610053, 19.782754897237798, 56.381173475036576],\n",
    "            [0.03348780914374249, 0.05969642309160508, 0.6495357772134724, 0.4019988009187704, 86.67288082826455, 21.9351458119514, 54.95917628247736],\n",
    "            [0.04858048870434071, 0.06249859402998216, 0.6520285031249436, 0.41547159127391164, 78.61238450995363, 32.0871286469137, 57.6912886995327],\n",
    "            [0.044955403066434, 0.06147291441270934, 0.4766389760104812, 0.35578683485961127, 73.85773134706328, 28.049064168143477, 50.028314653498484],\n",
    "            [0.018150965561848476, 0.0382082400484568, 0.9048633716396643, 0.47877622072719306, 75.55330486265375, 33.555552681263606, 54.569366566204714],\n",
    "            [0.041489243101502975, 0.062073029781988365, 0.5358461425112092, 0.14790781229500505, 78.46701524489801, 35.28092314351023, 59.69466320452322],\n",
    "            [0.038201820327711127, 0.058410334341043466, 0.6008727710878762, 0.3130940215930633, 73.51771773504636, 41.48686802126583, 55.41406753542582],\n",
    "            [0.024383247690889287, 0.05204788597357245, 0.7644885665083261, 0.39994072765351085, 69.96524116167818, 28.66215254313852, 56.96294434453782],\n",
    "            [0.021431572841785505, 0.04445056822111407, 0.4813484975099249, 0.367820204725247, 83.48985725083776, 26.48135619954723, 58.97708989699385],\n",
    "            [0.03494229266175665, 0.05760089176185389, 0.47984586476618063, 0.29516734011446016, 101.67462966394748, 40.121678116101634, 50.94734710458506],\n",
    "            [0.04911333904924302, 0.07296980618287638, 0.3058727730413098, 0.12467743531297192, 70.20572976815272, 27.18388483975257, 52.717637736471495],\n",
    "            [0.014241052415104845, 0.039420532504006456, 0.7819603989543301, 0.42208351634680574, 94.57519907610344, 32.21113908683915, 53.99476063453611],\n",
    "            [0.04926528301025485, 0.07490976241077688, 0.5966090556077672, 0.4697189666297974, 89.34211468370037, 23.27896501733184, 57.077856105211595],\n",
    "            [0.01816431315669412, 0.046830189455738774, 0.4756654926672992, 0.1480120046015581, 69.9038169706258, 36.52098920514542, 55.89468523408087],\n",
    "            [0.024996733384075306, 0.04719432393109679, 0.5151925547307362, 0.31020195787460103, 69.2855474212918, 21.7530211312802, 51.785876699082365],\n",
    "            [0.028829661083356377, 0.04827894824219736, 0.9121728953842995, 0.43085047803660437, 73.25266352571984, 34.63642513977085, 56.05783967544477],\n",
    "            [0.047458148945257704, 0.07724311963561367, 0.7827794729710769, 0.460535053906735, 79.05871624393497, 34.0220284265178, 56.0702638973298],\n",
    "            [0.036023636601935874, 0.04879290966965298, 0.5427425905614411, 0.41552174523830065, 84.8320164350395, 22.93506049212735, 58.30588312194385],\n",
    "            [0.027683968941858796, 0.04200330033175197, 0.40807455349796007, 0.1759613413476457, 83.63271261234745, 32.73474930925147, 59.2019517881804],\n",
    "            [0.04027918381439791, 0.052527482916430404, 0.4015932744959936, 0.15588570572917815, 97.4602642981343, 26.2000142063549, 57.54610046893173],\n",
    "            [0.048040550598659255, 0.0634285926220064, 0.8095352225561067, 0.4193114402497723, 77.9998807746339, 33.138411703135304, 52.54983398656523],\n",
    "            [0.025511083155662986, 0.04035084350339269, 0.6865650233606952, 0.3073044262438853, 77.6965732276857, 27.19166718809082, 57.54282969995187],\n",
    "            [0.02547992258826254, 0.05185308812414234, 0.4966387000210569, 0.2804326868627252, 98.90427227487096, 21.558601518834124, 50.16585028791288],\n",
    "            [0.04260219542112873, 0.06458713274356624, 0.7085673208572701, 0.47018800266209315, 100.3974798029357, 45.095469732394555, 59.90989275051207],\n",
    "            [0.04479183399319675, 0.06279586575126107, 0.35216196591338644, 0.2154430069519628, 111.92390266480733, 33.46134828971997, 57.140603853052625],\n",
    "            [0.033058073409637484, 0.04889993874016284, 0.8407801783702883, 0.41721494003364834, 94.10546452660098, 37.23280157138754, 52.60620279954543],\n",
    "            [0.02837843998080406, 0.039058748127919034, 0.9209506967709181, 0.48551153409576364, 95.96818730113738, 26.913753207783508, 55.150455268863546],\n",
    "            [0.04437848553754799, 0.061744633108626, 0.3998361623071156, 0.1070842559726859, 90.3239548623333, 39.50441213089233, 54.58964850208086],\n",
    "            [0.02573594937093609, 0.038079056643121514, 0.5112047825912587, 0.326176256097071, 59.76359043727234, 19.531129915506888, 54.62091138362676],\n",
    "            [0.03259584138195002, 0.05631683947993841, 0.23185884464742082, 0.10755895573295358, 103.16104735711772, 29.809877904004708, 55.35581129113283],\n",
    "            [0.028567109786497374, 0.04542695721556289, 0.7030645318768111, 0.44339722527506986, 104.49375177168933, 35.46688369335856, 52.225528332279566],\n",
    "            [0.022828657255768686, 0.05231527396210799, 0.7125171460837019, 0.23150411725906295, 67.77204300729021, 28.002454219179914, 55.554077554108204],\n",
    "            [0.0448986575087154, 0.06525601435514258, 0.6852730642572621, 0.41660559740581016, 104.00259590795694, 28.966622464406875, 53.07014275946807],\n",
    "            [0.01819928818529854, 0.04814908755310403, 0.5646243308604094, 0.301628121163926, 78.22296416215653, 24.95886333666775, 55.41673433328331],\n",
    "            [0.030358464074467788, 0.04981031376175517, 0.7457305658392704, 0.41408661671515545, 119.80737495097198, 36.22452821275287, 52.21992464010864],\n",
    "            [0.01935653481497259, 0.02961646127862319, 0.4644012413202584, 0.19291974813405527, 107.55865027938508, 38.18077499029938, 50.59161310200008],\n",
    "            [0.024432474283596767, 0.051765103756122914, 0.6720076783467737, 0.2570096203531054, 90.07215882214794, 41.47645208632286, 57.388050664700984],\n",
    "            [0.020194467422789394, 0.046299832983077306, 0.4571907497453306, 0.33663377111703985, 83.75814287878971, 39.892026863607924, 54.51706391245136],\n",
    "            [0.046374473276105076, 0.0761606755228623, 0.7519127491986156, 0.2654846040023148, 88.03205465598356, 26.088219723209434, 56.20869078788155],\n",
    "            [0.03393986162979633, 0.06005767150688417, 0.6286397395068634, 0.46389362710712934, 81.5448453644753, 28.165352296005636, 54.014743544053474],\n",
    "            [0.019994899299961066, 0.0449420800209797, 0.7085133941117119, 0.26898385341710085, 120.7739885321471, 34.03919058130021, 53.839298783775575],\n",
    "            [0.036195944879126925, 0.05700046131445996, 0.5183635285334881, 0.2868533619963535, 104.3228997974538, 32.52564698889187, 54.61598625217246],\n",
    "            [0.04151472093164821, 0.06421277953495556, 0.6048893731330143, 0.10556571356249425, 85.04789525609854, 26.687695744532128, 55.02832796149781],\n",
    "            [0.02598134759295133, 0.037989609299904796, 0.8665894367133019, 0.3754674690106815, 92.61514214711354, 34.657933713314115, 59.201333439536995],\n",
    "            [0.015900155332503597, 0.0325506888103814, 0.8247772162363735, 0.37467263932343975, 83.65542404120332, 23.4935252900424, 50.182891226962255],\n",
    "            [0.03601649115940741, 0.06388382424497031, 0.5311732658590143, 0.18596468684191647, 71.96618747592717, 32.8118157674512, 54.63890666438675],\n",
    "            [0.04692946843645631, 0.06066750233791049, 0.5629465667350202, 0.4003983588076854, 74.30776238594768, 19.497624772450106, 51.53730091317319],\n",
    "            [0.03005290650405741, 0.04769373548532649, 0.5940907150045894, 0.303072710215043, 89.38253733404397, 24.54583793211786, 58.928862416445995],\n",
    "            [0.024680556203294082, 0.05421605861885249, 0.692181255233328, 0.46778670104296105, 83.73976266881765, 33.95142652242554, 58.56552378134484],\n",
    "            [0.012479892815107424, 0.028998034673998432, 0.5736669147174976, 0.1943352625578858, 128.04702083210123, 20.081534640284133, 59.42785187361988],\n",
    "            [0.04174931464200135, 0.06264193787174632, 0.5862636072517816, 0.1790054345844109, 134.28377723544904, 28.16238150912023, 52.91195036521879],\n",
    "            [0.040280982563493085, 0.06629044639872103, 0.9456595086018688, 0.4494203289222093, 92.22284285836253, 24.044775052436556, 52.5527109638612],\n",
    "            [0.01872784484515034, 0.03171201522453611, 0.44532258009414016, 0.28956054480034515, 89.43589413051181, 25.62049220026082, 50.26799735950411],\n",
    "            [0.036921285211883856, 0.05601562611180809, 0.40104071727742685, 0.13273668234700448, 80.79330401357174, 30.37631388885928, 57.74648570040938],\n",
    "            [0.04551157721235713, 0.07096993935718528, 0.552824892270648, 0.32399413717707926, 90.95012314103839, 23.143166638011653, 54.950005670867775],\n",
    "            [0.040278728178653966, 0.06878197355512317, 0.8392167845834715, 0.41768775691335025, 98.0056811663495, 34.49910969891381, 51.804301546524606],\n",
    "            [0.01348768513889969, 0.024339208356043848, 0.43987233456044394, 0.2998478850275039, 74.30516531809522, 25.70151983453957, 58.110558916567115],\n",
    "            [0.03589655837012563, 0.057508085604018405, 0.5491973505010148, 0.16552347291230088, 125.29862180494266, 29.38471399725499, 50.37562402658892],\n",
    "            [0.016775061797441468, 0.046201475687354394, 0.29320312692645667, 0.135315881103686, 96.71653564723107, 22.034857128132366, 51.28279868414205],\n",
    "            [0.024031751633108823, 0.03429432736603938, 0.6121025307999257, 0.1310453965730953, 86.30543750165202, 18.706490327174087, 58.68827997234175],\n",
    "            [0.02404075136638438, 0.04183246676065533, 0.7421410316842708, 0.426282848553873, 92.96336509606442, 42.1336466097703, 59.708865717771396],\n",
    "            [0.0414400077465078, 0.06270142277652849, 0.5360994340159934, 0.4281426048007071, 115.98710349307564, 29.202882141606267, 50.29253106394561],\n",
    "            [0.04022596356383129, 0.06088888778526715, 0.5728507163692219, 0.4588479892104893, 109.01877455953503, 34.37977352613162, 51.34868681779013],\n",
    "            [0.03241673779962036, 0.052928161427736785, 0.883370981765932, 0.41941006170954787, 74.42653931730622, 30.24567948017533, 53.22770466221525],\n",
    "            [0.023565360182626248, 0.04595024346154905, 0.8332385932938503, 0.34230729304402385, 76.11512697836882, 28.69888467977336, 59.15088981183875],\n",
    "            [0.04133055890333591, 0.05929316441219578, 0.6332658318665112, 0.3347319516510426, 87.7223465683761, 25.574780630460623, 55.15895326779835],\n",
    "            [0.045940885127835625, 0.0705888929098285, 0.550991794352143, 0.1519213629130511, 67.1225276656356, 33.57265815680107, 53.60730893463912],\n",
    "            [0.045575618247671576, 0.06552178446482047, 0.6877035640505411, 0.31674135065332415, 76.01198798936684, 39.74171769744796, 54.23454326483309],\n",
    "            [0.03384743004825493, 0.06208883581180266, 0.6897715517665851, 0.4327612019317624, 62.49024710732341, 30.115117593400306, 50.68783731305713],\n",
    "            [0.02426574363986237, 0.04757646909779874, 0.4076469923868664, 0.13466821117985206, 95.19246933576164, 43.67874953310927, 55.566568923052245],\n",
    "            [0.04199080568354383, 0.0567678450622775, 0.6018641093583531, 0.19527771146699457, 72.61896279425073, 24.93565353859689, 59.6259617939573],\n",
    "            [0.04390337413722652, 0.06568335895136801, 0.6476948836017359, 0.38127064128678023, 111.11540539409874, 30.787860417302817, 50.341256794591054],\n",
    "            [0.02060962769667138, 0.049753044527967964, 0.4311132152288235, 0.23788648826751746, 94.65577966200465, 21.132428186445118, 52.67709021858257],\n",
    "            [0.035597901500593665, 0.058836092034033075, 0.7311735395518925, 0.40836571131326205, 84.1519946489191, 26.186985841093197, 53.912566371943996],\n",
    "            [0.04523258518075968, 0.060957105423908475, 0.6535706816985504, 0.16551689622936078, 94.46768262140964, 42.500255661099104, 50.146498173704046],\n",
    "            [0.01270092566767627, 0.026495503531835902, 0.5712992324863861, 0.16688148498738742, 71.86864718134677, 28.121513190370734, 51.5452010980312],\n",
    "            [0.04571800360189128, 0.0728041652176542, 0.8614084351520375, 0.4352777438927541, 98.93776084224858, 40.661106206552795, 57.42930755474333],\n",
    "            [0.039166988780715055, 0.06740588507548559, 0.8293689790865396, 0.4079665533346014, 82.68754598644756, 19.205578823794095, 52.54359660734415],\n",
    "            [0.04737662426727346, 0.058174132187941714, 0.6994190206070842, 0.4546001719959797, 88.80709070854147, 42.08679334294314, 56.99865054799874],\n",
    "            [0.043876191683135966, 0.06482401117409173, 0.9654522760285099, 0.46906662402674193, 100.70829302687181, 34.78076047511165, 52.16610776064059]]\n",
    "   \n",
    "\n",
    "\n",
    "\n",
    "def NeurelNet(InputData,OutputData,k,n):\n",
    "    from sklearn import preprocessing\n",
    "    import sklearn.neural_network as nn\n",
    "    import numpy as np\n",
    "    import matplotlib.pyplot as mp\n",
    "    import statistics as sta\n",
    "    %matplotlib inline\n",
    "    SCALER = preprocessing.StandardScaler()\n",
    "    SCALER.fit(InputData)\n",
    "    InputData = SCALER.transform(InputData)\n",
    "    if(k!=2 and k!=4 and k!= 8):\n",
    "        print(\"Not a good fold number, try again\")\n",
    "        return\n",
    "    if(n<1 or n>100 or n %1 != 0):\n",
    "        print(\"Not a good depth, try again\")\n",
    "        return\n",
    "    \n",
    "    m = len(InputData)\n",
    "    functions = []\n",
    "    TestingSets =[]\n",
    "    TestingOut = []\n",
    "    for i in range(k):\n",
    "        if(i==0):\n",
    "            TestingInput = InputData[int((i/k)*m):int(((i+1)/k)*m)]\n",
    "            TestingOutput = OutputData[int((i/k)*m):int(((i+1)/k)*m)]\n",
    "            TrainingInput = InputData[int(((i+1)/k)*m):]\n",
    "            TrainingOutput =  OutputData[int(((i+1)/k)*m):]\n",
    "        elif(i==(k-1)):\n",
    "            TestingInput = InputData[int((i/k)*m):int(((i+1)/k)*m)]\n",
    "            TestingOutput = OutputData[int((i/k)*m):int(((i+1)/k)*m)]\n",
    "            TrainingInput = InputData[0:int((i/k)*m)]\n",
    "            TrainingOutput = OutputData[0:int((i/k)*m)]\n",
    "        else:\n",
    "            TestingInput = InputData[int((i/k)*m):int(((i+1)/k)*m)]\n",
    "            TestingOutput = OutputData[int((i/k)*m):int(((i+1)/k)*m)]\n",
    "            TrainingInput = InputData[0:int((i/k)*m)] + InputData[int(((i+1)/k)*m):]\n",
    "            TrainingOutput = OutputData[0:int((i/k)*m)] + OutputData[int(((i+1)/k)*m):] \n",
    "\n",
    "        TestingOut.append(TestingOutput)\n",
    "        TestingSets.append(TestingInput)\n",
    "        newfun = nn.MLPRegressor(hidden_layer_sizes=(n,),max_iter=10000,tol=1)\n",
    "        newfun.fit(TrainingInput,TrainingOutput)\n",
    "        functions.append(newfun)\n",
    "    \n",
    "    if(k==2):\n",
    "        rows = 2\n",
    "        columns =1\n",
    "    if(k==4):\n",
    "        rows = 2\n",
    "        columns = 2\n",
    "    if(k==5):\n",
    "        rows = 2\n",
    "        columns =3\n",
    "    number = rows*100+columns*10\n",
    "    for i in range(len(functions)):\n",
    "        \n",
    "        Xmodel = []\n",
    "        Xreal = TestingOut[i]\n",
    "        Xmodel = functions[i].predict(TestingSets[i])\n",
    "        error = []\n",
    "        for j in range(len(Xreal)):\n",
    "            error.append(abs(Xmodel[j]-Xreal[j]))\n",
    "        print(\"XXXXX\")\n",
    "        print(\"For Fold Number \" + str(i))\n",
    "        print(\"The total error is \" + str(sum(error)))\n",
    "        print(\"The mean error is \" + str(sta.mean(error)))\n",
    "        print(\"The standard deviation of error is \" + str(sta.stdev(error)))\n",
    "        mp.subplot(number + i+1)\n",
    "        mp.plot(Xmodel,Xreal,'ro',range(int(max(Xmodel))),range(int(max(Xmodel))))\n",
    "        mp.title(\"Fold Number \" + str(i))\n",
    "    mp.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,\n",
    "                    wspace=0.35)\n",
    "    mp.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "if __name__==\"__main__\":\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
